import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    // Complete the roadsAndLibraries function below.
    static long roadsAndLibraries(int n, int c_lib, int c_road, int[][] cities) {
        ArrayList<ArrayList<Integer>>graph = new ArrayList<>();
        for(int i = 0; i <= n; i++)
            graph.add(new ArrayList<Integer>());
        for(int i = 0; i < cities.length; i++){
            int src = cities[i][0];
            int dest = cities[i][1];
            graph.get(src).add(dest);
            graph.get(dest).add(src);
        }
        boolean visited[] = new boolean[n+1];
        long ans = 0;
        // long roads = 0;
        // long libraries = 0;
        for(int i = 1; i <= n ; i++){
            if(!visited[i]){
                int nodes = dfs(i, graph, visited, 1);
                if(nodes*c_lib < c_lib+(nodes-1)*c_road)
                    ans += nodes*c_lib;
                else
                    ans += c_lib+(nodes-1)*c_road;
            }
        }
        return ans;
    }

    static int dfs(int src, ArrayList<ArrayList<Integer>> graph, boolean visited[], int count){
        visited[src] = true;
        for(int tmp: graph.get(src)){
            if(!visited[tmp])
                count = 1 + dfs(tmp, graph, visited, count);
        }
        return count;
    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int q = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        for (int qItr = 0; qItr < q; qItr++) {
            String[] nmC_libC_road = scanner.nextLine().split(" ");

            int n = Integer.parseInt(nmC_libC_road[0]);

            int m = Integer.parseInt(nmC_libC_road[1]);

            int c_lib = Integer.parseInt(nmC_libC_road[2]);

            int c_road = Integer.parseInt(nmC_libC_road[3]);

            int[][] cities = new int[m][2];

            for (int i = 0; i < m; i++) {
                String[] citiesRowItems = scanner.nextLine().split(" ");
                scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

                for (int j = 0; j < 2; j++) {
                    int citiesItem = Integer.parseInt(citiesRowItems[j]);
                    cities[i][j] = citiesItem;
                }
            }

            long result = roadsAndLibraries(n, c_lib, c_road, cities);

            bufferedWriter.write(String.valueOf(result));
            bufferedWriter.newLine();
        }

        bufferedWriter.close();

        scanner.close();
    }
}

